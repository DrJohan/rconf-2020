expr_list[ seq(1+(i-1)*3, i*3) ] = as.character(ag$expr)
index_list[ seq(1 + (i-1)*3, i*3) ] = size
time_list[ seq(1 + (i-1)*3, i*3) ] = ag$median
print(result)
}
index_list
time_list
df = data.frame( expr = expr_list, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
df
b
expr_list
expr_list
expr_list = rep("", length(sizes)*3)
index_list = expr_list
time_list = rep(0, length(sizes)*3)
for( i in seq(length(sizes)) )
{
size = sizes[i]
m = matrix(rnorm(size), ncol = 5); rownames(m) = as.character( seq(nrow(m))); colnames(m) = paste0("V", seq(ncol(m))); m = as.data.frame(m)
result = microbenchmark( m[2,2], m["2", "V2"], m$V2[2], times = 3)
ag = data.frame(expr = result$expr, time = result$time, stringsAsFactors =FALSE) %>% group_by(expr) %>% summarise(median = median(time)/1000) # in microseconds
expr_list[ seq(1+(i-1)*3, i*3) ] = as.character(ag$expr)
index_list[ seq(1 + (i-1)*3, i*3) ] = size
time_list[ seq(1 + (i-1)*3, i*3) ] = ag$median
print(result)
}
expr_list
df = data.frame( expr =  v, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
df = data.frame( expr =  expr_list, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
df
ggplot(df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
ggplot::ggplot(df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
ggplot2::ggplot(df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
ggplot2::ggplot(data = df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
library(ggplot2)
ggplot(data = df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
unique(df$expr)
unique(df$expr)
ggplot(data = df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time, colors = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time, colours = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line()
sizes = 10^seq(2,5)
expr_list = rep("", length(sizes)*3)
index_list = expr_list
time_list = rep(0, length(sizes)*3)
for( i in seq(length(sizes)) )
{
size = sizes[i]
m = matrix(rnorm(size), ncol = 5); rownames(m) = as.character( seq(nrow(m))); colnames(m) = paste0("V", seq(ncol(m))); m = as.data.frame(m)
result = microbenchmark( m[2,2], m["2", "V2"], m$V2[2], times = 3)
ag = data.frame(expr = result$expr, time = result$time, stringsAsFactors =FALSE) %>% group_by(expr) %>% summarise(median = median(time)/1000) # in microseconds
expr_list[ seq(1+(i-1)*3, i*3) ] = as.character(ag$expr)
index_list[ seq(1 + (i-1)*3, i*3) ] = size
time_list[ seq(1 + (i-1)*3, i*3) ] = ag$median
print(result)
}
df = data.frame( expr =  expr_list, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
ggplot(data = df, aes(x = total_cell, y = time, colour = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time, colours = expr)) + geom_line()
ggplot(data = df, aes(x = total_cell, y = time)) + geom_line(aes(colours = expr))
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colurs=expr))
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colours=expr))
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr))
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) + ylab("microsecond")
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) + ylab("microsecond") + xlab("Total number of cells")
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) + ylab("microsecond") + xlab("Total number of cells") + scale_y_continuous(labels = comma)
library(scales)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) + ylab("microsecond") + xlab("Total number of cells") + scale_y_continuous(labels = comma)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_continuous(labels = comma)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_discrete(labels = comma)
help("scale_x_discrete")
sizes = 10^seq(2,5)
expr_list = rep("", length(sizes)*3)
index_list = rep(0, length(sizes)*3)
time_list = rep(0, length(sizes)*3)
for( i in seq(length(sizes)) )
{
size = sizes[i]
m = matrix(rnorm(size), ncol = 5); rownames(m) = as.character( seq(nrow(m))); colnames(m) = paste0("V", seq(ncol(m))); m = as.data.frame(m)
result = microbenchmark( m[2,2], m["2", "V2"], m$V2[2], times = 3)
ag = data.frame(expr = result$expr, time = result$time, stringsAsFactors =FALSE) %>% group_by(expr) %>% summarise(median = median(time)/1000) # in microseconds
expr_list[ seq(1+(i-1)*3, i*3) ] = as.character(ag$expr)
index_list[ seq(1 + (i-1)*3, i*3) ] = size
time_list[ seq(1 + (i-1)*3, i*3) ] = ag$median
print(result)
}
df = data.frame( expr =  expr_list, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_discrete(labels = comma)
df
df$total_cell
str(df)
sizes = 10^seq(2,5)
expr_list = rep("", length(sizes)*3)
index_list = expr_list
time_list = rep(0, length(sizes)*3)
for( i in seq(length(sizes)) )
{
size = sizes[i]
m = matrix(rnorm(size), ncol = 5); rownames(m) = as.character( seq(nrow(m))); colnames(m) = paste0("V", seq(ncol(m))); m = as.data.frame(m)
result = microbenchmark( m[2,2], m["2", "V2"], m$V2[2], times = 3)
ag = data.frame(expr = result$expr, time = result$time, stringsAsFactors =FALSE) %>% group_by(expr) %>% summarise(median = median(time)/1000) # in microseconds
expr_list[ seq(1+(i-1)*3, i*3) ] = as.character(ag$expr)
index_list[ seq(1 + (i-1)*3, i*3) ] = size
time_list[ seq(1 + (i-1)*3, i*3) ] = ag$median
print(result)
}
df = data.frame( expr =  expr_list, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_discrete(labels = comma)
sizes = 10^seq(2,5)
expr_list = rep("", length(sizes)*3)
index_list = rep(0, length(sizes)*3)
time_list = rep(0, length(sizes)*3)
for( i in seq(length(sizes)) )
{
size = sizes[i]
m = matrix(rnorm(size), ncol = 5); rownames(m) = as.character( seq(nrow(m))); colnames(m) = paste0("V", seq(ncol(m))); m = as.data.frame(m)
result = microbenchmark( m[2,2], m["2", "V2"], m$V2[2], times = 3)
ag = data.frame(expr = result$expr, time = result$time, stringsAsFactors =FALSE) %>% group_by(expr) %>% summarise(median = median(time)/1000) # in microseconds
expr_list[ seq(1+(i-1)*3, i*3) ] = as.character(ag$expr)
index_list[ seq(1 + (i-1)*3, i*3) ] = size
time_list[ seq(1 + (i-1)*3, i*3) ] = ag$median
print(result)
}
df = data.frame( expr =  expr_list, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_discrete(labels = comma)
df = data.frame( expr =  expr_list, total_cell = index_list,  time = time_list, stringsAsFactors = FALSE)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells")# + scale_x_discrete(labels = comma)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_discrete(labels = comma, trans = "log10")
help(scale_x_discrete)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_continuous(labels = comma, trans = "log10")
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_continuous(labels = comma, trans = "log10") +
theme(text = element_text(size=20)
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_continuous(labels = comma, trans = "log10") +
theme(text = element_text(size=20))
ggplot(data = df, aes(x = total_cell, y = time, group = expr)) + geom_line(aes(colour=expr)) +
ylab("microsecond") + xlab("Total number of cells") + scale_x_continuous(labels = comma, trans = "log10") +
theme(text = element_text(size=14))
int_value = sample( seq(19000101, 99991231), 1E6)
head(int_value)
char_value = as.character(int_value)
microbenchmark( char_value > char_value, int_value > int_value, time = 100)
microbenchmark( char_value > char_value, int_value > int_value, time = 100, unit = 'ms')
require('profvis')
require('json')
require('xtable')
require('limma')
require('limma', character.only =  TRUE)
if(require('limma', character.only =  TRUE)) print('helo')
if(!require('limma', character.only =  TRUE)) print('helo')
help(require)
require('limma', character.only =  TRUE, verbose = TRUE)
workshop_packages = c('profvis', 'microbenchmark', 'data.table', 'lubridate', 'tidyverse')
for(package in workshop_packages)
{
# to check whether the package is already installed
if(!require(package, character.only =  TRUE))
{
print(paste(package, 'is not installed. Installation is about to begin.'))
install.packages(package)
}
}
workshop_packages = c('profvis', 'microbenchmark', 'data.table', 'lubridate', 'tidyverse')
for(package in workshop_packages)
{
# to check whether the package is already installed
if(!require(package, character.only =  TRUE))
{
print(paste(package, 'is not installed. Installation is about to begin.'))
install.packages(package)
}
else
print(paste(package, 'has already been installed.'))
}
rm(list=ls())
gc()
workshop_packages = c('profvis', 'microbenchmark', 'data.table', 'lubridate', 'tidyverse')
for(package in workshop_packages)
{
# to check whether the package is already installed
if(!require(package, character.only =  TRUE, quietly = TRUE))
{
print(paste(package, 'is not installed. Installation is about to begin.'))
install.packages(package)
}
else
print(paste(package, 'has already been installed.'))
}
ls()
workshop_packages = c('profvis', 'microbenchmark', 'data.table', 'lubridate', 'tidyverse')
for(package in workshop_packages)
{
# to check whether the package is already installed
if(!require(package, character.only =  TRUE, quietly = TRUE))
{
print(paste(package, 'is not installed. Installation is about to begin.'))
install.packages(package)
}
else
print(paste(package, 'has already been installed.'))
}
workshop_packages = c('profvis', 'microbenchmark', 'data.table', 'lubridate', 'tidyverse')
for(package in workshop_packages)
{
# to check whether the package is already installed
if(!require(package, character.only =  TRUE, quietly = TRUE, warn.conflicts = FALSE))
{
print(paste(package, 'is not installed. Installation is about to begin.'))
install.packages(package)
}
else
print(paste(package, 'has already been installed.'))
}
remove.packages('profvis')
library(profvis)
profvis
library(profvis)
workshop_packages = c('profvis', 'microbenchmark', 'data.table', 'lubridate', 'tidyverse')
for(package in workshop_packages)
{
# to check whether the package is already installed
if(!require(package, character.only =  TRUE))
{
print(paste(package, 'is not installed. Installation is about to begin.'))
install.packages(package)
}
else
print(paste(package, 'has already been installed.'))
}
library(microbenchmark)
microbenchmark("2017-01-03"> "2017-01-02", 20170103>20170102)
library(lubridate)
start <- c("2012-08-21", "2012-09-01", "2012-08-15", "2012-09-18")
end <- c("2012-09-16", "2012-09-06", "2012-08-22", "2012-10-11")
elapsed.time <- start %--% end
elapsed.time
days(elapsed.time)
as.duration(elapsed.time)/dday(1)
as.duration(elapsed.time)/ddays(1)
as.Date(start) - as.Date(end)
abs(as.Date(start) - as.Date(end))
microbenchmark(as.duration(start %--% end)/ddays(1), as.Date(start) - as.Date(end))
as.Date('2017-03-01')- as.Date('2017-02-28')
library(data.table)
sw = as.data.table(dplyr::starwas)
sw = as.data.table(dplyr::starwars)
head(sw)
sw  = sw[, .(films = films[[1]]), by = c(...)]
films[[1]]
sw$films[[1]]
head(dplyr::starwars)
head(revenue)
revenue
dplyr::revenue
sw  = sw[, .(films = films[[1]]), by = c(...)]
sw  = sw[, .(films = films[[1]])]
sw
sw  = sw[, .(films = films[[1]]), by = c(...)]
colnames(sw)
sw = as.data.table(dplyr::starwars)
head(sw)
sw  = sw[, .(films = films[[1]]), by = c(name, height, mass)]
sw  = sw[, .(films = films[[1]]), by = c('name', 'height', 'mass')]
s
sw
sw = as.data.table(dplyr::starwars)
sw2  = sw[, .(films = films[[1]]), by = c('name', 'height')]
sw2  = sw[, .(films = films[[1]]), by = c('name')]
sw2  = sw[, .(films = films[[1]]), by = c('mass')]
head(sw2)
dim(sw)
lg = function(mu, n, ybar) {
mu2 = mu^2
n * (ybar * mu - mu2 / 2.0) - log(1 + mu2)
}
mh = function(n, ybar, n_iter, mu_init, cand_sd) {
## Random-Walk Metropolis-Hastings algorithm
## step 1, initialize
mu_out = numeric(n_iter)
accpt = 0
mu_now = mu_init
lg_now = lg(mu=mu_now, n=n, ybar=ybar)
## step 2, iterate
for (i in 1:n_iter) {
## step 2a
mu_cand = rnorm(n=1, mean=mu_now, sd=cand_sd) # draw a candidate
## step 2b
lg_cand = lg(mu=mu_cand, n=n, ybar=ybar) # evaluate log of g with the candidate
lalpha = lg_cand - lg_now # log of acceptance ratio
alpha = exp(lalpha)
## step 2c
u = runif(1) # draw a uniform variable which will be less than alpha with probability min(1, alpha)
if (u < alpha) { # then accept the candidate
mu_now = mu_cand
accpt = accpt + 1 # to keep track of acceptance
lg_now = lg_cand
}
## collect results
mu_out[i] = mu_now # save this iteration's value of mu
}
## return a list of output
list(mu=mu_out, accpt=accpt/n_iter)
}
y = c(1.2, 1.4, -0.5, 0.3, 0.9, 2.3, 1.0, 0.1, 1.3, 1.9)
ybar = mean(y)
n = length(y)
hist(y, freq=FALSE, xlim=c(-1.0, 3.0)) # histogram of the data
curve(dt(x=x, df=1), lty=2, add=TRUE) # prior for mu
points(y, rep(0,n), pch=1) # individual data points
points(ybar, 0, pch=19) # sample mean
x
dt
dt(x=x, df=1)
set.seed(43) # set the random seed for reproducibility
post = mh(n=n, ybar=ybar, n_iter=1e3, mu_init=0.0, cand_sd=3.0)
str(post)
library("coda")
traceplot(as.mcmc(post$mu))
install.packages('coda')
library("coda")
traceplot(as.mcmc(post$mu))
post$mu
mean(post$mu)
head(post$mu)
head(post$mu,20)
lg(mu = 1.5074320, n = 1e3, ybar = )
lg(mu = 1.5074320, n = 1e3, ybar = ybar)
lg(mu = 0.4480772, n = 1e3, ybar = ybar)
runif(1)
runif(1)
runif(1)
runif(1)
update_mu = function(n, ybar, sig2, mu_0, sig2_0) {
sig2_1 = 1.0 / (n / sig2 + 1.0 / sig2_0)
mu_1 = sig2_1 * (n * ybar / sig2 + mu_0 / sig2_0)
rnorm(n=1, mean=mu_1, sd=sqrt(sig2_1))
}
update_sig2 = function(n, y, mu, nu_0, beta_0) {
nu_1 = nu_0 + n / 2.0
sumsq = sum( (y - mu)^2 ) # vectorized
beta_1 = beta_0 + sumsq / 2.0
out_gamma = rgamma(n=1, shape=nu_1, rate=beta_1) # rate for gamma is shape for inv-gamma
1.0 / out_gamma # reciprocal of a gamma random variable is distributed inv-gamma
}
gibbs = function(y, n_iter, init, prior) {
ybar = mean(y)
n = length(y)
## initialize
mu_out = numeric(n_iter)
sig2_out = numeric(n_iter)
mu_now = init$mu
## Gibbs sampler
for (i in 1:n_iter) {
sig2_now = update_sig2(n=n, y=y, mu=mu_now, nu_0=prior$nu_0, beta_0=prior$beta_0)
mu_now = update_mu(n=n, ybar=ybar, sig2=sig2_now, mu_0=prior$mu_0, sig2_0=prior$sig2_0)
sig2_out[i] = sig2_now
mu_out[i] = mu_now
}
cbind(mu=mu_out, sig2=sig2_out)
}
y = c(1.2, 1.4, -0.5, 0.3, 0.9, 2.3, 1.0, 0.1, 1.3, 1.9)
ybar = mean(y)
n = length(y)
## prior
prior = list()
prior$mu_0 = 0.0
prior$sig2_0 = 1.0
prior$n_0 = 2.0 # prior effective sample size for sig2
prior$s2_0 = 1.0 # prior point estimate for sig2
prior$nu_0 = prior$n_0 / 2.0 # prior parameter for inverse-gamma
prior$beta_0 = prior$n_0 * prior$s2_0 / 2.0 # prior parameter for inverse-gamma
hist(y, freq=FALSE, xlim=c(-1.0, 3.0)) # histogram of the data
curve(dnorm(x=x, mean=prior$mu_0, sd=sqrt(prior$sig2_0)), lty=2, add=TRUE) # prior for mu
points(y, rep(0,n), pch=1) # individual data points
points(ybar, 0, pch=19) # sample mean
set.seed(53)
init = list()
init$mu = 0.0
post = gibbs(y=y, n_iter=1e3, init=init, prior=prior)
summary(as.mcmc(post))
y = c(-0.2, -1.5, -5.3, 0.3, -0.8, -2.2)
ybar = mean(y)
n = length(y)
## prior
prior = list()
prior$mu_0 = 0.0
prior$sig2_0 = 1.0
prior$n_0 = 2.0 # prior effective sample size for sig2
prior$s2_0 = 1.0 # prior point estimate for sig2
prior$nu_0 = prior$n_0 / 2.0 # prior parameter for inverse-gamma
prior$beta_0 = prior$n_0 * prior$s2_0 / 2.0 # prior parameter for inverse-gamma
hist(y, freq=FALSE, xlim=c(-1.0, 3.0)) # histogram of the data
curve(dnorm(x=x, mean=prior$mu_0, sd=sqrt(prior$sig2_0)), lty=2, add=TRUE) # prior for mu
points(y, rep(0,n), pch=1) # individual data points
points(ybar, 0, pch=19) # sample mean
set.seed(53)
init = list()
init$mu = 0.0
post = gibbs(y=y, n_iter=1e3, init=init, prior=prior)
summary(as.mcmc(post))
y = c(-0.2, -1.5, -5.3, 0.3, -0.8, -2.2)
ybar = mean(y)
n = length(y)
## prior
prior = list()
prior$mu_0 = 0.0
prior$sig2_0 = 1.0
prior$n_0 = 2.0 # prior effective sample size for sig2
prior$s2_0 = 1.0 # prior point estimate for sig2
prior$nu_0 = prior$n_0 / 2.0 # prior parameter for inverse-gamma
prior$beta_0 = prior$n_0 * prior$s2_0 / 2.0 # prior parameter for inverse-gamma
hist(y, freq=FALSE, xlim=c(-1.0, 3.0)) # histogram of the data
curve(dnorm(x=x, mean=prior$mu_0, sd=sqrt(prior$sig2_0)), lty=2, add=TRUE) # prior for mu
points(y, rep(0,n), pch=1) # individual data points
points(ybar, 0, pch=19) # sample mean
set.seed(53)
init = list()
init$mu = 0.0
post = gibbs(y=y, n_iter=5e3, init=init, prior=prior)
summary(as.mcmc(post))
## prior
prior = list()
prior$mu_0 = 1.0
prior$sig2_0 = 1.0
prior$n_0 = 2.0 # prior effective sample size for sig2
prior$s2_0 = 1.0 # prior point estimate for sig2
prior$nu_0 = prior$n_0 / 2.0 # prior parameter for inverse-gamma
prior$beta_0 = prior$n_0 * prior$s2_0 / 2.0 # prior parameter for inverse-gamma
hist(y, freq=FALSE, xlim=c(-1.0, 3.0)) # histogram of the data
curve(dnorm(x=x, mean=prior$mu_0, sd=sqrt(prior$sig2_0)), lty=2, add=TRUE) # prior for mu
points(y, rep(0,n), pch=1) # individual data points
points(ybar, 0, pch=19) # sample mean
set.seed(53)
init = list()
init$mu = 0.0
post = gibbs(y=y, n_iter=5e3, init=init, prior=prior)
summary(as.mcmc(post))
pnorm(1,mean = 1, sd = 1)
pnorm(0,mean = 1, sd = 1)
pnorm(0,mean = 1, sd = 1, lower.tail = F)
12446/3746
iris
colnames(iris)
glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, family = 'binomial')
args(glm)
glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, family = 'binomial', data = iris)
tmp = glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, family = 'binomial', data = iris)
summary(tmp)
tmp = glm(Species ~ ., family = binomial(logit), data = iris)
tmp
summary(tmp)
table(iris$Species)
library(randomForest)
iris_rf <- randomForest(Species~.,data=trainData,ntree=100,proximity=TRUE)
iris_rf <- randomForest(Species~.,data=iris,ntree=100,proximity=TRUE)
iris_rf
head(iris)
testData = list(Sepal.Length = 4, Sepal.Width = 5, Petal.Length = 2, Petal.Width = 0.3)
testData
predict(iris_rf, newdata = testData)
plumber::plumb(file='MyDocuments/R-conf/2020/plumber.r')$run()
plumber::plumb(file='MyDocuments/R-conf/2020/plumber.r')$run()
plumber::plumb(file='MyDocuments/R-conf/2020/plumber.r')$run()
dim(iris)
library(randomForest)
set.seed(2020)
ind <- sample(2,nrow(iris),replace=TRUE,prob=c(0.7,0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
iris_rf <- randomForest(Species~.,data=trainData,ntree=100,proximity=TRUE)
table(predict(iris_rf),trainData$Species)
saveRDS(iris_rf, file = 'model.rds')
getwd()
setwd("~/MyDocuments/R-conf/2020/rconf2020-deploy")
saveRDS(iris_rf, file = 'model.rds')
head(testData)
predict(iris_rf, testData  = data.frame(Sepal.Length = 5.4, Sepal.Width = 3.7, Petal.Length = 1.5, Petal.Width = 0.2))
data.frame(Sepal.Length = 5.4, Sepal.Width = 3.7, Petal.Length = 1.5, Petal.Width = 0.2)
help(predict)
predict(iris_df, newData = data.frame(Sepal.Length = 5.4, Sepal.Width = 3.7, Petal.Length = 1.5, Petal.Width = 0.2))
predict(iris_rf, newData = data.frame(Sepal.Length = 5.4, Sepal.Width = 3.7, Petal.Length = 1.5, Petal.Width = 0.2))
predict(iris_rf, newData = testData)
dim(testData)
predict(iris_rf, newData = testData, type = 'response')
summary(iris_rf)
print(iris_rf)
irisPred<-predict(iris_rf,newdata=testData)
irisPred
length(irisPred)
irisPred<-predict(iris_rf,newdata=data.frame(Sepal.Length = 5.4, Sepal.Width = 3.7, Petal.Length = 1.5, Petal.Width = 0.2))
irisPred
help(iris)
head(testData)
plumber::plumb(file='api/route.r')$run()
plumber::plumb(file='api/route.r')$run()
plumber::plumb(file='api/route.r')$run()
plumber::plumb(file='api/route.r')$run()
plumber::plumb(file='api/route.r')$run()
help(message)
